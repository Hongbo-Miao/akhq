import{_ as t,r as o,o as c,c as i,b as e,a,e as l,d as s}from"./app.346e0b9f.js";const p={},r=l(`<h1 id="protobuf-deserialization" tabindex="-1"><a class="header-anchor" href="#protobuf-deserialization" aria-hidden="true">#</a> Protobuf deserialization</h1><p>To deserialize topics containing data in Protobuf format, you can set topics mapping: for each <code>topic-regex</code> you can specify <code>descriptor-file-base64</code> (descriptor file encoded to Base64 format), or you can put descriptor files in <code>descriptors-folder</code> and specify <code>descriptor-file</code> name, also specify corresponding message types for keys and values. If, for example, keys are not in Protobuf format, <code>key-message-type</code> can be omitted, the same for <code>value-message-type</code>. . It&#39;s important to keep in mind that both <code>key-message-type</code> and <code>value-message-type</code> require a fully-qualified name. This configuration can be specified for each Kafka cluster.</p><p>Example configuration can look like as follows:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">akhq</span><span class="token punctuation">:</span>
  <span class="token key atrule">connections</span><span class="token punctuation">:</span>
    <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
      <span class="token key atrule">properties</span><span class="token punctuation">:</span>
        <span class="token comment"># standard kafka properties</span>
      <span class="token key atrule">deserialization</span><span class="token punctuation">:</span>
        <span class="token key atrule">protobuf</span><span class="token punctuation">:</span>
          <span class="token key atrule">descriptors-folder</span><span class="token punctuation">:</span> <span class="token string">&quot;/app/protobuf_desc&quot;</span>
          <span class="token key atrule">topics-mapping</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token key atrule">topic-regex</span><span class="token punctuation">:</span> <span class="token string">&quot;album.*&quot;</span>
              <span class="token key atrule">descriptor-file-base64</span><span class="token punctuation">:</span> <span class="token string">&quot;Cs4BCgthbGJ1bS5wcm90bxIXY29tLm5ldGNyYWNrZXIucHJvdG9idWYidwoFQWxidW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhYKBmFydGlzdBgCIAMoCVIGYXJ0aXN0EiEKDHJlbGVhc2VfeWVhchgDIAEoBVILcmVsZWFzZVllYXISHQoKc29uZ190aXRsZRgEIAMoCVIJc29uZ1RpdGxlQiUKF2NvbS5uZXRjcmFja2VyLnByb3RvYnVmQgpBbGJ1bVByb3RvYgZwcm90bzM=&quot;</span>
              <span class="token key atrule">value-message-type</span><span class="token punctuation">:</span> <span class="token string">&quot;org.akhq.utils.Album&quot;</span>
            <span class="token punctuation">-</span> <span class="token key atrule">topic-regex</span><span class="token punctuation">:</span> <span class="token string">&quot;film.*&quot;</span>
              <span class="token key atrule">descriptor-file-base64</span><span class="token punctuation">:</span> <span class="token string">&quot;CuEBCgpmaWxtLnByb3RvEhRjb20uY29tcGFueS5wcm90b2J1ZiKRAQoERmlsbRISCgRuYW1lGAEgASgJUgRuYW1lEhoKCHByb2R1Y2VyGAIgASgJUghwcm9kdWNlchIhCgxyZWxlYXNlX3llYXIYAyABKAVSC3JlbGVhc2VZZWFyEhoKCGR1cmF0aW9uGAQgASgFUghkdXJhdGlvbhIaCghzdGFycmluZxgFIAMoCVIIc3RhcnJpbmdCIQoUY29tLmNvbXBhbnkucHJvdG9idWZCCUZpbG1Qcm90b2IGcHJvdG8z&quot;</span>
              <span class="token key atrule">value-message-type</span><span class="token punctuation">:</span> <span class="token string">&quot;org.akhq.utils.Film&quot;</span>
            <span class="token punctuation">-</span> <span class="token key atrule">topic-regex</span><span class="token punctuation">:</span> <span class="token string">&quot;test.*&quot;</span>
              <span class="token key atrule">descriptor-file</span><span class="token punctuation">:</span> <span class="token string">&quot;other.desc&quot;</span>
              <span class="token key atrule">key-message-type</span><span class="token punctuation">:</span> <span class="token string">&quot;org.akhq.utils.Row&quot;</span>
              <span class="token key atrule">value-message-type</span><span class="token punctuation">:</span> <span class="token string">&quot;org.akhq.utils.Envelope&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),u=s("More examples about Protobuf deserialization can be found in "),d={href:"https://github.com/tchiotludo/akhq/tree/dev/src/test/java/org/akhq/utils",target:"_blank",rel:"noopener noreferrer"},k=s("tests"),m=s(". Info about the descriptor files generation can be found in "),b={href:"https://github.com/tchiotludo/akhq/tree/dev/src/test/resources/protobuf_proto",target:"_blank",rel:"noopener noreferrer"},g=s("test resources"),v=s(".");function h(f,y){const n=o("ExternalLinkIcon");return c(),i("div",null,[r,e("p",null,[u,e("a",d,[k,a(n)]),m,e("a",b,[g,a(n)]),v])])}const q=t(p,[["render",h],["__file","protobuf.html.vue"]]);export{q as default};
